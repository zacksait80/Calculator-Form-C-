<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAADjsAAA47AAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAONZVgDnWmEA51pgB+daYhrnWmQL51lqAOlabgvpWXAa6llyB+pZ
        cgDoWW0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADlWlwA5lphAOZaXyjnWmGl51pk3OhaZ7XpWmxl6VlvtepZ
        ct3qWXal61l5KOtZdwDrWXoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOZaYADmWl8e51phw+daZP/oWmf/6Fpr/+la
        bvvqWXL/6ll1/+tZef/rWXzD7FmAH+xZfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnWmEA51pfA+daYZDnWmT/6Fpn/+ha
        a//pWm7/6lly/+pZdf/rWXn/7Fl8/+xZgP/tWYOQ7lmLA+1ZhgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOdaYwDnWmMx51pk5+ha
        Z//oWmv/6Vpu/+pZcv/qWXX/61l5/+xZfP/sWYD/7VmD/+1Zh+fuWYkx7lmJAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnWmUA51pmAOda
        ZXzoWmf/6Fpr/+labv/qWXL/6ll1/+tZef/sWXz/7FmA/+1Zg//tWYf/7liK/+5YjXztWIoA71iQAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOha
        ZwDoWmYI6Fpouehaa//pWm7/6lly/+pZdf/rWXn/7Fl8/+xZgP/tWYP/7VmH/+5Yiv/vWI7/71iRuO9Y
        lAjvWJMA3ls2AOFbPADgWzkP4Fs7H+FbPx/hW0If4ltGH+NbSR/jW00f5FtRH+RaVB/lWlgf5lpbH+Za
        Xx/nWmIf51pkDuhaahfoWmvX6Vpu/+pZcv/qWXX/61l5/+xZfP/sWYD/7VmD/+1Zh//uWIr/71iO/+9Y
        kf/wWJXX8FiXF/BYlgDgWzkA4Fs5DuBbOqngWz3i4VtB4uJbROLiW0ji41tL4ONbT+DkW1Li5VpW4uVa
        WeLmWl3g51pg4OdaZOXoWmZy6VptGulabt7qWXL/6ll1/+tZef/sWXz/7FmA/+1Zg//tWYf/7liK/+9Y
        jvDvWJHw8FiV//BYmN7xWJod8ViaAOBbPADgWzse4Fs94OFbQP/hW0Tp4ltH4eNbS+njW0/+5FtS/uVa
        VenlWlnh5lpc6eZaYP7nWmT+6Fpn7ehaaYDpWXER6llyz+pZdf/rWXn/7Fl8/+xZgP/tWYP/7VmH/+5Y
        iv/vWI7x71iPUvBYlVLwWJn08Vic0PFYnRLxWJ0A4Vs/AOFbPx7hW0Hi4VtE6eJbRT7iW0gZ41tOPuRb
        UunlWlXp5VpXPuVaWhnmWmA+51pk6ehaZ+noWmg+6FprEOlZbALqWXac61l5/+xZfP/sWYD/7VmD/+1Z
        h//uWIr/71iO/+9YkfHwWJVR8VibUvFYnPTyWJ+d9FihAvJYnwDhW0MA4VtCHuJbROLiW0fp41tLPuRb
        URnkWlQ+5VpW6eVaWenmWl0+51pjGehaZj7oWmfp6Fpq6elabj7qWXUc6ll1DOtZeTzsWXzn7FmA/+1Z
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6ll0AOpZdB7qWXbi61l44utZeh/rWXoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA81epAPNXqR/0V6ri9Fet4vRXrx/0V68AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADrWXgA61l3HutZeeLrWXzq7FmAQO1Z
        hh3uWYkf7liMH+9YkB/wWJMf8FiXH/FYmh/xWJ4f8lihH/NYpR/zV6gd9FesQPRXrur1V7Hi9VezH/VX
        sgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOtZewDrWXse7Fl94OxZ
        gP/tWYTp7VmH4u5Yi+LvWI7i71iS4vBYleLwWJni8Vic4vJYoOLyWKPi81en4vRXquL0V67p9Vex//VX
        tOD2V7Ye9le2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7Fl+AOxZ
        fQ7sWYCp7VmD4u1Zh+LuWYri7liO4u9YkeLwWJXi8FiY4vFYnOLyWJ/i8lij4vNXpuL0V6ri9Fet4vVX
        seL1V7Ti9le3qfZXuA72V7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADsWYIA7lmFAOxZgg/tWYUe7lmIHu5YjB7vWI8e71iTHvBYlx7xWJoe8VieHvJYoR7yWKUe81eoHvRX
        rB70V68e9VezHvZXth72V7kP9le1APZWuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////8R///+AP///AB///gAP//4AD//+AA///AAHAAAABgAAAAYAA
        AAGAAAABgAAAA4AAAAOAAAAPgAAMP4AADh+AAA4PgAAPB4AAD8+AAA//gAAP/4AAD/+AAA//gAAP/4f/
        D/+H/w//gAAP/4AAD/+AAA//wAAf//////8=
</value>
  </data>
</root>